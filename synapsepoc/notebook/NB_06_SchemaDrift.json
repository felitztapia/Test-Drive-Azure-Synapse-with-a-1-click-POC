{
	"name": "NB_06_SchemaDrift",
	"properties": {
		"folder": {
			"name": "MDMF_Validation"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "felitztapia",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "d21a04d7-d3ca-4f4c-9b7b-a0fae8f64249"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/28100aed-fbc9-43b5-be58-aebd70043c6b/resourceGroups/MDC-Felix-RG/providers/Microsoft.Synapse/workspaces/ftr23m5xeeoklumapocws1/bigDataPools/felitztapia",
				"name": "felitztapia",
				"type": "Spark",
				"endpoint": "https://ftr23m5xeeoklumapocws1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/felitztapia",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Metadata-Driven Ingestion Framework \r\n",
					"#### Data Validation: 06 SchemaDrift\r\n",
					"Connect to sink instance, obtain the schema of the file ingested and compare it to a schema defined in a JSON file located in the same sink instance.\r\n",
					"This validation takes as input parameter the allow evolution boolean value."
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### IMPORTANT!\r\n",
					"#### Configuration for testing and debug\r\n",
					"Change the value of \"testing=False\" for production environment.\r\n",
					"Change the value of debug variables to see or hide prints with information."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"testing = False #<------ IMPORTANT!: Change the value of \"testing=False\" for production environment.\r\n",
					"print_dictionaries = False\r\n",
					"print_common_variables = False\r\n",
					"print_empty_variables = False"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Data for testing.\r\n",
					"SinkGlobalParameters =  \"{\\\"kv_scope_name\\\":\\\"ADLS_Spark\\\",\\\"kv_workspace_id\\\":\\\"MDIF-la-workspace-Id\\\",\\\"kv_workspace_pk\\\":\\\"MDIF-la-workspace-pk\\\",\\\"raw_storage_secret\\\":\\\"\\\",\\\"raw_storage_name\\\":\\\"\\\",\\\"sink_container_name\\\":\\\"sink\\\",\\\"schema_container_name\\\":\\\"schemas\\\",\\\"output_container_name\\\":\\\"datatransformation\\\",\\\"adls2_storage_account_name\\\":\\\"adlsmetadatadriven2\\\",\\\"adls2_blob_secret_name\\\":\\\"MDIF-ADLSmetadatadriven2-AccountKey\\\",\\\"sink_type\\\":\\\"ADLS\\\"}\"\r\n",
					"\r\n",
					"DataValidationParameters = \"{\\\"FwkLogId\\\":5,\\\"SrcObjectChild\\\":\\\"Product.csv\\\",\\\"DvMappingId\\\":11,\\\"SourcePath\\\":\\\"source/jsonfile/Product.json\\\",\\\"ConvertPath\\\":\\\"/Converted/ADLS/TripData/2022/01/25/16/\\\",\\\"SinkFolderPath\\\":\\\"Converted/ADLS/Files/Product/2022/01/07/15/DataValidation/\\\",\\\"FileName\\\":\\\"\\\",\\\"RowsRead\\\":null,\\\"RowsCopied\\\":null,\\\"SourceType\\\":\\\"parquet\\\",\\\"SchemaName\\\":\\\"Files\\\",\\\"SrcObject\\\":\\\"TripData_20130101.parquet\\\",\\\"InstanceURL\\\":\\\"https://adlsmetadatadriven.dfs.core.windows.net/\\\",\\\"Port\\\":null,\\\"UserName\\\":null,\\\"SecretName\\\":\\\"MDIF-ADLS-AccountKey\\\",\\\"SrcPath\\\":\\\"source/jsonfile\\\",\\\"IPAddress\\\":null,\\\"NotebookPath\\\":\\\"/Shared/Metadata Driven Ingestion Framework/Data Validation/NB_01_RowCount\\\",\\\"FileFormat\\\":\\\"parquet\\\",\\\"FunctionName\\\":\\\"RowCount\\\",\\\"DvMethod\\\":\\\"Databricks\\\",\\\"ConditionFlag\\\":1,\\\"EntRunId\\\":\\\"59f03a27-fa44-4c9b-92ec-598d4a808166\\\",\\\"InputParameter\\\":null}\""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"SinkGlobalParameters =\"\"\r\n",
					"DataValidationParameters=\"\""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print('Obtain the parameters sent by Azure Data Factory, ***NOTE: Change above the value of \"testing=False\" for production environment.')\r\n",
					"#dbutils.widgets.text(\"DataValidationParameters\", \"\", \"\")\r\n",
					"#dv_params = dbutils.widgets.get(\"DataValidationParameters\") if testing==False else DataValidationParameters\r\n",
					"dv_params = DataValidationParameters\r\n",
					"\r\n",
					"#dbutils.widgets.text(\"SinkGlobalParameters\", \"\", \"\")\r\n",
					"#sink_params = dbutils.widgets.get(\"SinkGlobalParameters\") if testing==False else SinkGlobalParameters\r\n",
					"sink_params = SinkGlobalParameters\r\n",
					"\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Convert string (json) parameters to dictionaries.\r\n",
					"import json\r\n",
					"\r\n",
					"dv_params_dict = json.loads(dv_params)\r\n",
					"sink_params_dict = json.loads(sink_params)\r\n",
					"\r\n",
					"input_parameter_dict=dv_params_dict['InputParameter']"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Get the necessary variables\r\n",
					"fwklog_id = dv_params_dict[\"FwkLogId\"]  \r\n",
					"function_name = str(dv_params_dict[\"FunctionName\"]).strip()                           # Validation Function name\r\n",
					"dv_method = str(dv_params_dict[\"DvMethod\"]).strip()                                   # Data validation method name\r\n",
					"\r\n",
					"\r\n",
					"source_path = dv_params_dict['ConvertPath']\r\n",
					"#replace // to get the correct path \r\n",
					"source_path = source_path.replace('//', '/')\r\n",
					"#adls_source_name = 'adlsmetadatadriven2.dfs.core.windows.net/'\r\n",
					"\r\n",
					"\r\n",
					"sink_type=sink_params_dict[\"sink_type\"]\r\n",
					"source_container_name = sink_params_dict[\"sink_container_name\"]\r\n",
					"\r\n",
					"\r\n",
					"kv_scope_name = sink_params_dict[\"kv_scope_name\"]                                     # Name of the Azure Key Vault-backed scope\r\n",
					"kv_workspace_id = sink_params_dict[\"kv_workspace_id\"].strip()                         # Name of the secret for the log analytics workspace id\r\n",
					"kv_workspace_pk = sink_params_dict[\"kv_workspace_pk\"].strip()                         # Name of the secret for the log analytics primary key\r\n",
					"adls_storage_account_name = sink_params_dict[\"adls_storage_name\"].strip()    # Name of the Azure Blob Storage Account \r\n",
					"adls_blob_secret_name = sink_params_dict[\"adls_storage_secret_name\"].strip()            # Name of the container in the Azure Blob Storage \r\n",
					"\r\n",
					"storage_account_name = adls_storage_account_name              # Name of the Azure Blob Storage Account we store it in the same as adls\r\n",
					"adls_source_name = adls_storage_account_name + '.dfs.core.windows.net/'\r\n",
					"\r\n",
					"condition = dv_params_dict[\"ConditionFlag\"]                                 # UPDATE ConditionFlag new value\r\n",
					"# Declare input parameter variable\r\n",
					"column_names = input_parameter_dict[\"Column Name\"] if \"Column Name\" in input_parameter_dict else '' # Name(s) of column(s) to validate, there may be no parameters (for example NB_01) \r\n",
					"allow_evolution_bool = input_parameter_dict[\"Allow Evolution\"]     # Boolean parameter that allows schema drift\r\n",
					"\r\n",
					"# Declare variables for NB_06_SchemaDrift\r\n",
					"schema_file_name = dv_params_dict[\"SrcObjectChild\"].replace('.csv','.json').strip()   # Name of the schema file     \r\n",
					"schema_container_name = sink_params_dict[\"schema_container_name\"].strip()             # Name of the container of the schema file"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#read parquet file\r\n",
					"#connet to the Sink\r\n",
					" # Function to Access Azure Blob storage using the DataFrame API reads json, csv, parquet and xml file and writes it into parquet \r\n",
					"def read_pqt(kv_scope_name, adls_blob_secret_name, adls_storage_account_name, source_container_name, adls_source_name, source_path):\r\n",
					"  \r\n",
					"  \r\n",
					"  try:\r\n",
					"    \r\n",
					"    print(\"Start process\")\r\n",
					"     #Set up an account access keySet up an account access key\r\n",
					"    spark.conf.set(\"spark.storage.synapse.linkedServiceName\", kv_scope_name)\r\n",
					"    spark.conf.set(\"fs.azure.account.auth.type\", \"SAS\")\r\n",
					"    spark.conf.set(\"fs.azure.sas.token.provider.type\", \"com.microsoft.azure.synapse.tokenlibrary.LinkedServiceBasedSASProvider\")\r\n",
					"    \"\"\"Read data Output Files and create delta tables \"\"\"\r\n",
					"    path = \"abfss://{}@{}{}\".format(source_container_name, adls_source_name, source_path)\r\n",
					"\r\n",
					"    print(\"******************************** {}\".format(f'{path}*.parquet'))\r\n",
					"    try:\r\n",
					"      df = spark.read.parquet(f'{path}*.snappy.parquet')\r\n",
					"    except:\r\n",
					"      df = spark.read.parquet(f'{path}*.parquet')\r\n",
					"\r\n",
					"    \r\n",
					"    return df    \r\n",
					"  \r\n",
					"  except Exception as ex:\r\n",
					"    raise Exception(f'Error: {ex}')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sink_file = read_pqt(kv_scope_name, adls_blob_secret_name, adls_storage_account_name, source_container_name, adls_source_name, source_path)\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Function to join and separate columns from sink and schema files.\r\n",
					"import pandas as pd\r\n",
					"\r\n",
					"def compare_schema(sink_file_columns, schema_file_columns):\r\n",
					"  \r\n",
					"  print('\\n> Comparing columns sink vs schema:\\n>> Source Schema Sink:   {}\\n>> JSON Schema: {}'.format(sink_file_columns, schema_file_columns))\r\n",
					"  sink_file_columns = pd.DataFrame(sink_file_columns)\r\n",
					"  schema_file_columns =  pd.DataFrame(schema_file_columns)\r\n",
					"  merge = sink_file_columns.merge(schema_file_columns, how='outer', indicator=True)\r\n",
					"  del_cols = merge.query('_merge == \"left_only\"').drop('_merge', 1)\r\n",
					"  new_cols = merge.query('_merge == \"right_only\"').drop('_merge', 1)\r\n",
					"  del_cols_list = []\r\n",
					"  new_cols_list = []\r\n",
					"  \r\n",
					"  for item in del_cols[0]:\r\n",
					"    del_cols_list.append(item)\r\n",
					"    \r\n",
					"  for item in new_cols[0]:\r\n",
					"    new_cols_list.append(item)\r\n",
					"  \r\n",
					"  return del_cols_list, new_cols_list"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Build the inputs for the DvLog table\r\n",
					"def Build_Logs(del_cols_list, new_cols_list,fwklog_id,allow_evolution_bool):\r\n",
					"  \r\n",
					"  validation_bool = \"True\"\r\n",
					"\r\n",
					"  if new_cols_list is None:\r\n",
					"    count_drifted_values = 0\r\n",
					"  else: \r\n",
					"    count_drifted_values = len(del_cols_list) + len(new_cols_list)\r\n",
					"\r\n",
					"  if new_cols_list is None:\r\n",
					"    message = \"Schema file does not exist\"\r\n",
					"    validation_bool = \"False\"\r\n",
					"  elif del_cols_list != [] or new_cols_list != []:\r\n",
					"    message = \"Schema drift identified. \"\r\n",
					"    if del_cols_list != []:\r\n",
					"      message = message + \"Deleted columns: \" + str(del_cols_list) + \". \"\r\n",
					"      if allow_evolution_bool.lower() == \"false\":\r\n",
					"        validation_bool = \"False\"\r\n",
					"\r\n",
					"    if new_cols_list != []:\r\n",
					"      message = message + \"Added columns: \" + str(new_cols_list) + \".\"\r\n",
					"      if allow_evolution_bool.lower() == \"false\":\r\n",
					"        validation_bool = \"False\"\r\n",
					"  \r\n",
					"  json_output = {'ExecutionStatus': 'Successfull',\"FwkLogId\": fwklog_id, \"Output\": {\"Count\": str(count_drifted_values), \"Validation\": { \"Status\": validation_bool, \"Message\": message}}}\r\n",
					"  return json_output"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Main method for validation.\r\n",
					"def Validating_NB_06_SchemaDrift(schema_file_name, schema_container_name,storage_account_name, adls_storage_account_name,fwklog_id,function_name,dv_method,kv_scope_name,kv_workspace_id,kv_workspace_pk,allow_evolution_bool):\r\n",
					"  schema_file_columns = []\r\n",
					"  sink_file_columns = []\r\n",
					"  \r\n",
					"  try:\r\n",
					"    \"\"\"Read data from schema file\"\"\"\r\n",
					"    \r\n",
					"    if not schema_file_name.endswith(\".json\"):\r\n",
					"      schema_file_name += \".json\"\r\n",
					"    \r\n",
					"    if sink_type.upper() == \"BLOB\":\r\n",
					"      print('\\n> Getting schema file from BLOB.')\r\n",
					"      schema_file = spark.read.json(\"wasbs://{}@{}.blob.core.windows.net/{}\".format(schema_container_name, storage_account_name, schema_file_name))\r\n",
					"    elif sink_type.upper() == \"ADLS\":\r\n",
					"      print('\\n> Getting schema file from ADLS.')\r\n",
					"      schema_file = spark.read.json(\"abfss://{}@{}.dfs.core.windows.net/{}\".format(schema_container_name, adls_storage_account_name, schema_file_name))      \r\n",
					"    else:\r\n",
					"      print(\"\\n> PLEASE CHOOSE BETWEEN BLOB OR ADLS\")\r\n",
					"      \r\n",
					"    schema_file_columns = schema_file.columns #Schema file\r\n",
					"    sink_file_columns = sink_file.columns  #Original file in sink\r\n",
					"    \r\n",
					"  except Exception as error:\r\n",
					"    schema_file = None\r\n",
					"    schema_file_columns = None\r\n",
					"    print(\"*** ERROR:\", error)\r\n",
					"    msg_error = {'ExecutionStatus': 'Failed','Error Message':'Fail to execute main method for validation','FwkLogId': fwklog_id,'FunctionName': function_name ,'DvMethod':dv_method}\r\n",
					"    #post_data(kv_scope_name, kv_workspace_id, kv_workspace_pk, msg_error)\r\n",
					"    \r\n",
					"  if sink_file != None and schema_file != None:\r\n",
					"    print(\"> Successfull sink and schema file loaded\")\r\n",
					"    # Compare columns and obtain the added and deleted columns\r\n",
					"    del_cols, new_cols = compare_schema(sink_file_columns, schema_file_columns)\r\n",
					"  else:\r\n",
					"    print(\"> Unsuccessfull to load sink and schema files, please see the logs\")\r\n",
					"    del_cols, new_cols = sink_file_columns, schema_file_columns\r\n",
					"    \r\n",
					"  return Build_Logs(del_cols, new_cols,fwklog_id,allow_evolution_bool)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Getting schema file and comparing with sink file.\r\n",
					"try:\r\n",
					"  \r\n",
					"  json_output = Validating_NB_06_SchemaDrift(schema_file_name, schema_container_name,storage_account_name, adls_storage_account_name,fwklog_id,function_name,dv_method,kv_scope_name,kv_workspace_id,kv_workspace_pk,allow_evolution_bool)\r\n",
					"  #post_data(kv_scope_name, kv_workspace_id, kv_workspace_pk, json_output)\r\n",
					"except Exception as err:\r\n",
					"  print(f\"An error has occurred: {err}\")\r\n",
					"  msg_error = {'ExecutionStatus': 'Failed','Error Message':'Fail at Getting schema file and comparing with sink file','FwkLogId': fwklog_id,'FunctionName': function_name ,'DvMethod':dv_method}\r\n",
					"  #post_data(kv_scope_name, kv_workspace_id, kv_workspace_pk, msg_error)\r\n",
					"  \r\n",
					"  \r\n",
					"json_output"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Pass parameter to ADF\r\n",
					"mssparkutils.notebook.exit(json_output)"
				],
				"execution_count": null
			}
		]
	}
}